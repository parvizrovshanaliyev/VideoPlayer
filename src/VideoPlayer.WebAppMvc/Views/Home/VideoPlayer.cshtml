@{
    ViewData["Title"] = "Video Player";
}

<h1>@ViewData["Title"]</h1>
<div class="mb-4">
    <label for="videoFileName" class="form-label">Enter video file name:</label>
    <input type="text" id="videoFileName" class="form-control" placeholder="sample.mp4">
    <button class="btn btn-primary mt-2" id="loadVideoBtn">Load Video</button>
</div>
<div class="d-flex justify-content-center position-relative">
    <video id="videoPlayer" controls width="640" height="360" class="border">
        <source src="" type="video/mp4">
        Your browser does not support the video tag.
    </video>
    <div id="bufferingIndicator" class="position-absolute text-center d-none" style="top: 50%; left: 50%; transform: translate(-50%, -50%);">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Buffering...</span>
        </div>
        <p class="mt-2">Buffering...</p>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const videoPlayer = document.getElementById("videoPlayer");
            const loadVideoBtn = document.getElementById("loadVideoBtn");
            const videoFileNameInput = document.getElementById("videoFileName");
            const bufferingIndicator = document.getElementById("bufferingIndicator");

            loadVideoBtn.addEventListener("click", async () => {
                const videoFileName = videoFileNameInput.value.trim();

                if (!videoFileName) {
                    alert("Please enter a video file name.");
                    return;
                }

                const apiUrl = `http://localhost:5000/api/video/stream?videoFileName=${encodeURIComponent(videoFileName)}`;
                try {
                    showBuffering();
                    await updateVideoSource(apiUrl);
                } catch (error) {
                    console.error("Error updating video source:", error);
                    alert("Failed to load the video. Please try again.");
                } finally {
                    hideBuffering();
                }
            });

            async function updateVideoSource(apiUrl) {
                const videoSource = videoPlayer.querySelector("source");
                videoSource.src = apiUrl;

                videoPlayer.addEventListener("waiting", showBuffering);
                videoPlayer.addEventListener("playing", hideBuffering);

                videoPlayer.load();
                await videoPlayer.play();
            }

            function showBuffering() {
                bufferingIndicator.classList.remove("d-none");
            }

            function hideBuffering() {
                bufferingIndicator.classList.add("d-none");
            }
        });
    </script>
}
